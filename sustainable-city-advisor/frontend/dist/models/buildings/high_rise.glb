// Basic 3D model of a high-rise building
// This is a placeholder model created with Three.js Buffer Geometry

import * as THREE from 'three';
import { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';

// Create a scene
const scene = new THREE.Scene();

// Create the main building structure
const buildingGeometry = new THREE.BoxGeometry(4, 20, 4);
const buildingMaterial = new THREE.MeshStandardMaterial({ 
  color: 0x4A90E2,
  roughness: 0.2,
  metalness: 0.8,
  transparent: true,
  opacity: 0.9
});
const building = new THREE.Mesh(buildingGeometry, buildingMaterial);
building.position.y = 10;
scene.add(building);

// Create windows
const windowRows = 10;
const windowsPerRow = 4;
const windowWidth = 0.6;
const windowHeight = 1;
const windowMaterial = new THREE.MeshStandardMaterial({
  color: 0xFFFFFF,
  roughness: 0.2,
  metalness: 0.9,
  emissive: 0x222222
});

// Add windows to each side of the building
for (let side = 0; side < 4; side++) {
  for (let row = 0; row < windowRows; row++) {
    for (let col = 0; col < windowsPerRow; col++) {
      const windowGeometry = new THREE.PlaneGeometry(windowWidth, windowHeight);
      const window = new THREE.Mesh(windowGeometry, windowMaterial);
      
      // Calculate window position based on side, row, and column
      switch(side) {
        case 0: // Front
          window.position.set(
            -1.5 + col * 1,
            2 + row * 2,
            2.01
          );
          break;
        case 1: // Right
          window.position.set(
            2.01,
            2 + row * 2,
            1.5 - col * 1
          );
          window.rotation.y = Math.PI / 2;
          break;
        case 2: // Back
          window.position.set(
            1.5 - col * 1,
            2 + row * 2,
            -2.01
          );
          window.rotation.y = Math.PI;
          break;
        case 3: // Left
          window.position.set(
            -2.01,
            2 + row * 2,
            -1.5 + col * 1
          );
          window.rotation.y = -Math.PI / 2;
          break;
      }
      
      scene.add(window);
    }
  }
}

// Create roof details
const roofDetailGeometry = new THREE.BoxGeometry(3, 1, 3);
const roofDetailMaterial = new THREE.MeshStandardMaterial({ 
  color: 0x333333,
  roughness: 0.5,
  metalness: 0.7
});
const roofDetail = new THREE.Mesh(roofDetailGeometry, roofDetailMaterial);
roofDetail.position.y = 20.5;
scene.add(roofDetail);

// Add an antenna
const antennaGeometry = new THREE.CylinderGeometry(0.05, 0.05, 3);
const antennaMaterial = new THREE.MeshStandardMaterial({ 
  color: 0x666666,
  roughness: 0.3,
  metalness: 0.8
});
const antenna = new THREE.Mesh(antennaGeometry, antennaMaterial);
antenna.position.y = 22.5;
scene.add(antenna);

// Add a ground-level entrance
const entranceGeometry = new THREE.BoxGeometry(1.5, 2, 0.5);
const entranceMaterial = new THREE.MeshStandardMaterial({ 
  color: 0x333333,
  roughness: 0.5,
  metalness: 0.5
});
const entrance = new THREE.Mesh(entranceGeometry, entranceMaterial);
entrance.position.set(0, 1, 2.25);
scene.add(entrance);

// Export the model
const exporter = new GLTFExporter();
exporter.parse(
  scene,
  function (gltf) {
    const output = JSON.stringify(gltf, null, 2);
    console.log(output);
    // This would normally save to a file, but we'll use the output in our model file
    // In a real environment, you would save this to high_rise.glb
  },
  function (error) {
    console.log('An error happened during export:', error);
  },
  {}
);
