// Basic 3D model of a knowledge effect
// This is a placeholder model created with Three.js Buffer Geometry

import * as THREE from 'three';
import { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';

// Create a scene
const scene = new THREE.Scene();

// Create a floating book
const bookGroup = new THREE.Group();

// Book cover
const coverGeometry = new THREE.BoxGeometry(0.8, 0.1, 1.0);
const coverMaterial = new THREE.MeshStandardMaterial({ 
  color: 0x3F51B5,
  roughness: 0.4,
  metalness: 0.3
});
const cover = new THREE.Mesh(coverGeometry, coverMaterial);
bookGroup.add(cover);

// Book pages
const pagesGeometry = new THREE.BoxGeometry(0.75, 0.08, 0.95);
const pagesMaterial = new THREE.MeshStandardMaterial({ 
  color: 0xFFFFFF,
  roughness: 0.9,
  metalness: 0.0
});
const pages = new THREE.Mesh(pagesGeometry, pagesMaterial);
pages.position.y = 0.001;
bookGroup.add(pages);

// Floating position and rotation
bookGroup.position.y = 0.5;
bookGroup.rotation.x = 0.2;
scene.add(bookGroup);

// Create particles for knowledge symbols
const particleCount = 80;
const particleGeometry = new THREE.BufferGeometry();
const positions = new Float32Array(particleCount * 3);
const colors = new Float32Array(particleCount * 3);

// Create random positions and colors for particles
for (let i = 0; i < particleCount; i++) {
  const i3 = i * 3;
  
  // Random position in a sphere around the book
  const radius = 0.6 + Math.random() * 0.8;
  const theta = Math.random() * Math.PI * 2;
  const phi = Math.random() * Math.PI;
  
  positions[i3] = radius * Math.sin(phi) * Math.cos(theta);
  positions[i3 + 1] = 0.5 + radius * Math.cos(phi);
  positions[i3 + 2] = radius * Math.sin(phi) * Math.sin(theta);
  
  // Purple/blue colors for knowledge
  colors[i3] = 0.5 + Math.random() * 0.3; // R
  colors[i3 + 1] = 0.2 + Math.random() * 0.2; // G
  colors[i3 + 2] = 0.8 + Math.random() * 0.2; // B
}

particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));

// Material with vertex colors
const particleMaterial = new THREE.PointsMaterial({
  size: 0.05,
  vertexColors: true,
  transparent: true,
  opacity: 0.7,
  blending: THREE.AdditiveBlending
});

// Create the particle system
const particleSystem = new THREE.Points(particleGeometry, particleMaterial);
scene.add(particleSystem);

// Add some floating symbols (simple text-like shapes)
const createSymbol = (x, y, z, type) => {
  let symbolGeometry;
  
  if (type === 'sphere') {
    symbolGeometry = new THREE.SphereGeometry(0.1, 8, 8);
  } else if (type === 'cube') {
    symbolGeometry = new THREE.BoxGeometry(0.15, 0.15, 0.15);
  } else {
    symbolGeometry = new THREE.TorusGeometry(0.1, 0.03, 8, 16);
  }
  
  const symbolMaterial = new THREE.MeshStandardMaterial({
    color: 0x7E57C2,
    emissive: 0x5E35B1,
    emissiveIntensity: 0.5,
    roughness: 0.3,
    metalness: 0.7
  });
  
  const symbol = new THREE.Mesh(symbolGeometry, symbolMaterial);
  symbol.position.set(x, y, z);
  scene.add(symbol);
};

// Add a few symbols
createSymbol(0.5, 0.7, 0.3, 'sphere');
createSymbol(-0.4, 0.9, -0.2, 'cube');
createSymbol(0.2, 1.1, -0.4, 'torus');

// Add a point light to illuminate everything
const light = new THREE.PointLight(0x7E57C2, 1.5, 3);
light.position.set(0, 0.8, 0);
scene.add(light);

// Export the model
const exporter = new GLTFExporter();
exporter.parse(
  scene,
  function (gltf) {
    const output = JSON.stringify(gltf, null, 2);
    console.log(output);
    // This would normally save to a file, but we'll use the output in our model file
    // In a real environment, you would save this to knowledge.glb
  },
  function (error) {
    console.log('An error happened during export:', error);
  },
  {}
);
