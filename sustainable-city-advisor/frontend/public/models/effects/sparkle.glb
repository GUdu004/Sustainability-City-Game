// Basic 3D model of sparkle effect
// This is a placeholder model created with Three.js Buffer Geometry

import * as THREE from 'three';
import { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';

// Create a scene
const scene = new THREE.Scene();

// Create sparkle particles
const particleCount = 50;
const particleGeometry = new THREE.BufferGeometry();
const positions = new Float32Array(particleCount * 3);
const colors = new Float32Array(particleCount * 3);

// Create random positions and colors for particles
for (let i = 0; i < particleCount; i++) {
  const i3 = i * 3;
  
  // Random position in a sphere
  const radius = 0.1 + Math.random() * 0.9; // Vary the distance from center
  const theta = Math.random() * Math.PI * 2; // Random angle around y-axis
  const phi = Math.random() * Math.PI; // Random angle from y-axis
  
  positions[i3] = radius * Math.sin(phi) * Math.cos(theta);
  positions[i3 + 1] = radius * Math.cos(phi);
  positions[i3 + 2] = radius * Math.sin(phi) * Math.sin(theta);
  
  // Gold/yellow colors with slight variation
  colors[i3] = 1.0; // R
  colors[i3 + 1] = 0.8 + Math.random() * 0.2; // G
  colors[i3 + 2] = 0.0; // B
}

particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
particleGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));

// Material with vertex colors
const particleMaterial = new THREE.PointsMaterial({
  size: 0.2,
  vertexColors: true,
  transparent: true,
  opacity: 0.8
});

// Create the particle system
const particleSystem = new THREE.Points(particleGeometry, particleMaterial);
scene.add(particleSystem);

// Add a central glow
const glowGeometry = new THREE.SphereGeometry(0.3, 16, 16);
const glowMaterial = new THREE.MeshBasicMaterial({
  color: 0xFFFF00,
  transparent: true,
  opacity: 0.5
});
const glow = new THREE.Mesh(glowGeometry, glowMaterial);
scene.add(glow);

// Export the model
const exporter = new GLTFExporter();
exporter.parse(
  scene,
  function (gltf) {
    const output = JSON.stringify(gltf, null, 2);
    console.log(output);
    // This would normally save to a file, but we'll use the output in our model file
    // In a real environment, you would save this to sparkle.glb
  },
  function (error) {
    console.log('An error happened during export:', error);
  },
  {}
);
